# ADO Pipeline
name: Azure Springs Apps LZA Deployment

trigger: none

variables:
  - group: "Standard Deployment Configuration"
  - group: "Applications"
  - name: apiGatewayJar
    value: "spring-petclinic-api-gateway/target/spring-petclinic-api-gateway-3.0.1.jar"
  - name: adminServerJar
    value: "spring-petclinic-admin-server/target/spring-petclinic-admin-server-3.0.1.jar"
  - name: customersServiceJar
    value: "spring-petclinic-customers-service/target/spring-petclinic-customers-service-3.0.1.jar"
  - name: vetsServiceJar
    value: "spring-petclinic-vets-service/target/spring-petclinic-vets-service-3.0.1.jar" 
  - name: visitsServiceJar
    value: "spring-petclinic-visits-service/target/spring-petclinic-visits-service-3.0.1.jar" 

jobs:
  - job: deploy_hub_network
    displayName: Deploy 02 Hub Network
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/02-Hub-Network"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'hub-network.tfstate'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          commandOptions: '-out main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
      # - task: AzureCLI@2
      #   displayName: Terraform init
      #   inputs:
      #     azureSubscription: $(azureServiceConnection)
      #     scriptLocation: inlineScript
      #     scriptType: bash
      #     inlineScript: |
      #       set -eux  # fail on error
      #       terraform init \
      #         -backend-config=storage_account_name=$(stateStorageAccountName) \
      #         -backend-config=container_name=$(stateStorageContainerName) \
      #         -backend-config=key=hub-network.tfstate \
      #         -backend-config=resource_group_name=$(terraformStateRg)
      #     workingDirectory: $(workingDirectory)
      #     addSpnToEnvironment: true
      # - task: AzureCLI@2
      #   displayName: Terraform plan
      #   inputs:
      #     azureSubscription: $(azureServiceConnection)
      #     scriptLocation: inlineScript
      #     scriptType: bash
      #     inlineScript: |
      #       set -eux  # fail on error
      #       terraform plan -out my.plan \
      #         -var="state_sa_rg=$(terraformStateRg)" \
      #         -var="state_sa_name=$(stateStorageAccountName)" \
      #         -var="state_sa_container_name=$(stateStorageContainerName)" \
      #         -var="location=$(region)" \
      #         -var="name_prefix=$(namePrefix)" \
      #         -var="environment=$(environment)" \
      #         -var="SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId)"
      #     workingDirectory: $(workingDirectory)
      #     addSpnToEnvironment: true
      # - task: AzureCLI@2
      #   displayName: Terraform apply
      #   inputs:
      #     azureSubscription: $(azureServiceConnection)
      #     scriptLocation: inlineScript
      #     scriptType: bash
      #     inlineScript: |
      #       set -eux  # fail on error
      #       terraform apply my.plan
      #     workingDirectory: $(workingDirectory)
      #     addSpnToEnvironment: true

  # - job: deploy_spoke_network
  #   displayName: Deploy 03 LZ Network
  #   dependsOn: [deploy_hub_network]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/03-LZ-Network"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: deploy_shared_resources
  #   displayName: Deploy 04 LZ Shared Resources
  #   dependsOn: [deploy_spoke_network]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/04-LZ-SharedResources"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: deploy_hub_firewall
  #   displayName: Deploy 05 Hub Firewall
  #   dependsOn: [deploy_shared_resources, deploy_hub_network]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/05-Hub-AzureFirewall"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: deploy_standard_sa
  #   displayName: Deploy 06 LZ Spring Apps Standard
  #   dependsOn: [deploy_hub_network, deploy_shared_resources, deploy_hub_firewall]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/06-LZ-SpringApps-Standard"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: deploy_pet_clinic_infra
  #   displayName: Deploy Pet Clinic Infrastructure
  #   dependsOn: [deploy_spoke_network, deploy_shared_resources, deploy_standard_sa]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/sample-apps/petclinic/terraform"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: build_and_deploy_pet_clinic_ms
  #   displayName: Build and Deploy Pet Clinic Microservices
  #   dependsOn: [deploy_pet_clinic_infra, deploy_standard_sa ]
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: destroy_pet_clinic_infra
  #   displayName: Destroy Pet Clinic Infrastructure
  #   dependsOn: [deploy_spoke_network, deploy_shared_resources, deploy_shared_resources, deploy_pet_clinic_infra, build_and_deploy_pet_clinic_ms]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/sample-apps/petclinic/terraform"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: destroy_spring_apps_standard
  #   displayName: Destroy 06 LZ Spring Apps Standard
  #   dependsOn: [destroy_pet_clinic_infra,  deploy_standard_sa]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/06-LZ-SpringApps-Standard"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: destroy-hub-firewall
  #   displayName: Destroy 05 Hub Firewall
  #   dependsOn: [destroy_spring_apps_standard]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/05-Hub-AzureFirewall"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: destroy_shared_resources
  #   displayName: Destroy 04 LZ Shared Resources
  #   dependsOn: [destroy-hub-firewall]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/04-LZ-SharedResources"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: destroy_spoke_network
  #   displayName: Destroy 03 LZ Network
  #   dependsOn: [destroy_shared_resources]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/03-LZ-Network"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self

  # - job: destroy_hub_network
  #   displayName: Destroy 02 Hub Network
  #   dependsOn: [destroy_spoke_network]
  #   variables: 
  #     - name: workingDirectory
  #       value:  "Scenarios/ASA-Secure-Baseline/Terraform/02-Hub-Network"
  #   pool: 
  #     vmImage: 'ubuntu-latest'

  #   steps:
  #     - checkout: self