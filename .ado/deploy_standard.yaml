# ADO Pipeline
name: Azure Springs Apps 

trigger: none

variables:
  - group: "Standard Deployment Configuration"
  - group: "Applications"
  - name: apiGatewayJar
    value: "spring-petclinic-api-gateway/target/spring-petclinic-api-gateway-3.0.1.jar"
  - name: adminServerJar
    value: "spring-petclinic-admin-server/target/spring-petclinic-admin-server-3.0.1.jar"
  - name: customersServiceJar
    value: "spring-petclinic-customers-service/target/spring-petclinic-customers-service-3.0.1.jar"
  - name: vetsServiceJar
    value: "spring-petclinic-vets-service/target/spring-petclinic-vets-service-3.0.1.jar" 
  - name: visitsServiceJar
    value: "spring-petclinic-visits-service/target/spring-petclinic-visits-service-3.0.1.jar" 

jobs:
  - job: deploy-hub-network
    displayName: Deploy 02 Hub Network
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/02-Hub-Network"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
        displayName: Install Terraform
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: ps
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true

      - task: AzureCLI@2
        displayName: Terraform init
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: ps
          inlineScript: |
            set -eux  # fail on error
            terraform init \
              -backend-config=storage_account_name=$(stateStorageAccountName) \
              -backend-config=container_name=$(stateStorageContainerName) \
              -backend-config=key=hub-network.tfstate \
              -backend-config=resource_group_name=$(terraformStateRg)
          workingDirectory: $(workingDirectory)
          addSpnToEnvironment: true
      - task: AzureCLI@2
        displayName: Terraform plan
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: ps
          inlineScript: |
            set -eux  # fail on error
            terraform plan -out my.plan \
              -var="state_sa_rg=$(terraformStateRg)" \
              -var="state_sa_name=$(stateStorageAccountName)" \
              -var="state_sa_container_name=$(stateStorageContainerName)" \
              -var="location=$(region)" \
              -var="name_prefix=$(namePrefix)" \
              -var="environment=$(environment)" \
              -var="SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId)"
          workingDirectory: $(workingDirectory)
          addSpnToEnvironment: true
      - task: AzureCLI@2
        displayName: Terraform apply
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: ps
          inlineScript: |
            set -eux  # fail on error
            terraform apply my.plan
          workingDirectory: $(workingDirectory)
          addSpnToEnvironment: true

  - job: deploy-spoke-network
    displayName: Deploy 03 LZ Network
    dependsOn: [deploy-hub-network]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: deploy-shared-resources
    displayName: Deploy 04 LZ Shared Resources
    dependsOn: [deploy-spoke-network]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: deploy-hub-firewall
    displayName: Deploy 05 Hub Firewall
    dependsOn: [deploy-shared-resources, deploy-hub-network]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: deploy-standard-sa
    displayName: Deploy 06 LZ Spring Apps Standard
    dependsOn: [deploy-hub-network, deploy-shared-resources, deploy-hub-firewall]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: deploy-pet-clinic-infra
    displayName: Deploy Pet Clinic Infrastructure
    dependsOn: [deploy-spoke-network, deploy-shared-resources, deploy-standard-sa]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: build-and-deploy-pet-clinic-ms
    displayName: Build and Deploy Pet Clinic Microservices
    dependsOn: [deploy-pet-clinic-infra, deploy-standard-sa ]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: destroy-pet-clinic-infra
    displayName: Destroy Pet Clinic Infrastructure
    dependsOn: [deploy-spoke-network, deploy-shared-resources, deploy-shared-resources, deploy-pet-clinic-infra, build-and-deploy-pet-clinic-ms]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: destroy-spring-apps-standard
    displayName: Destroy 06 LZ Spring Apps Standard
    dependsOn: [destroy-pet-clinic-infra,  deploy-standard-sa]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: destroy-hub-firewall
    displayName: Destroy 05 Hub Firewall
    dependsOn: [destroy-spring-apps-standard]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: destroy-shared-resources
    displayName: Destroy 04 LZ Shared Resources
    dependsOn: [destroy-hub-firewall]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: destroy-spoke-network
    displayName: Destroy 03 LZ Network
    dependsOn: [destroy-shared-resources]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

  - job: destroy-hub-network
    displayName: Destroy 02 Hub Network
    dependsOn: [destroy-spoke-network]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self