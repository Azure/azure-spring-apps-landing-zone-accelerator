# ADO Pipeline
name: Azure Springs Apps LZA Deployment - Enterprise

trigger: none

variables:
  - name: deployFirewallEnterprise
    value: "false"
  - name: destroyEnterprise
    value: "false"
  - name: region
    value: "eastus"
  - name: namePrefix
    value: "springent"
  - name: environment
    value: "dev"
  - name: jumpBoxUsername
    value: "ltzadmin"
  - group: "Enterprise Deployment Configuration"

resources:
  repositories:
  - repository: acme-fitness-store # The name used to reference this repository in the checkout step
    type: github
    endpoint: ibersanoMS
    name: Azure-Samples/acme-fitness-store
    ref: Azure

jobs:
  - job: deploy_hub_network
    displayName: Deploy 02 Hub Network
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/02-Hub-Network"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'hub-network'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)
          outputFormat: json
          outputTo: file
      
      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
      - task: TerraformTaskV3@3
        name: terraformOutputs
        displayName: Create Terraform Outputs
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: $(workingDirectory)
          environmentServiceNameAzureRM: $(azureServiceConnection)
          outputFormat: json
          outputTo: file

      - powershell: |
          $terraformOutput = Get-Content "$(terraformOutputs.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs

  - job: deploy_spoke_network
    displayName: Deploy 03 LZ Network
    dependsOn: [deploy_hub_network]
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/03-LZ-Network"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-network'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
      - task: TerraformTaskV3@3
        name: terraformOutputs
        displayName: Create Terraform Outputs
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: $(workingDirectory)
          environmentServiceNameAzureRM: $(azureServiceConnection)
          outputFormat: json
          outputTo: file

      - powershell: |
          $terraformOutput = Get-Content "$(terraformOutputs.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs

  - job: deploy_shared_resources
    displayName: Deploy 04 LZ Shared Resources
    dependsOn: [deploy_spoke_network]
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/04-LZ-SharedResources"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-sharedresources'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName) -var jump_host_admin_username=$(jumpBoxUsername) -var jump_host_password=$(jumpBoxPassword) '
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
      - task: TerraformTaskV3@3
        name: terraformOutputs
        displayName: Create Terraform Outputs
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: $(workingDirectory)
          environmentServiceNameAzureRM: $(azureServiceConnection)
          outputFormat: json
          outputTo: file

      - powershell: |
          $terraformOutput = Get-Content "$(terraformOutputs.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs

  - job: deploy_hub_firewall
    displayName: Deploy 05 Hub Firewall
    dependsOn: [deploy_shared_resources, deploy_hub_network]
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/05-Hub-AzureFirewall"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'hub-azurefirewall'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: and(eq(variables['terraformPlan.changesPresent'], 'true'), eq(variables['deployFirewall'], 'true'))
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
      - task: TerraformTaskV3@3
        name: terraformOutputs
        displayName: Create Terraform Outputs
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: $(workingDirectory)
          environmentServiceNameAzureRM: $(azureServiceConnection)
          outputFormat: json
          outputTo: file

      - powershell: |
          $terraformOutput = Get-Content "$(terraformOutputs.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs

  - job: deploy_enterprise_sa
    displayName: Deploy 06 LZ Spring Apps Enterprise
    dependsOn: [deploy_hub_network, deploy_shared_resources, deploy_hub_firewall]
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/06-LZ-SpringApps-Enterprise"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self

      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-springapps-enterprise'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
      - task: TerraformTaskV3@3
        name: terraformOutputs
        displayName: Create Terraform Outputs
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: $(workingDirectory)
          environmentServiceNameAzureRM: $(azureServiceConnection)
          outputFormat: json
          outputTo: file

      - powershell: |
          $terraformOutput = Get-Content "$(terraformOutputs.jsonOutputVariablesPath)" | ConvertFrom-Json
          $terraformOutput | Get-Member -MemberType NoteProperty | % { $o = $terraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
        name: terraformOutput
        displayName: Read terraform outputs
  
  - job: deploy_acme_fitness_infra
    displayName: Deploy Acme Fitness Infrastructure
    dependsOn: [deploy_spoke_network, deploy_shared_resources, deploy_enterprise_sa]
    variables: 
      - name: workingDirectory
        value:  "Scenarios/sample-apps/fitness-store/terraform"
      - name: spring_apps_service_name 
        value: $[ dependencies.deploy_enterprise_sa.outputs['terraformOutput.spring_apps_service_name'] ]
      - name: spring_apps_rg 
        value: $[ dependencies.deploy_enterprise_sa.outputs['terraformOutput.spring_apps_rg'] ]
      - name: spoke_rg 
        value: $[ dependencies.deploy_spoke_network.outputs['terraformOutput.spoke_rg'] ]
      - name: spoke_vnet_name 
        value: $[ dependencies.deploy_spoke_network.outputs['terraformOutput.spoke_vnet_name'] ]
      - name: private_dns_rg 
        value: $[ dependencies.deploy_spoke_network.outputs['terraformOutput.private_dns_rg'] ]
      - name: shared_rg 
        value: $[ dependencies.deploy_shared_resources.outputs['terraformOutput.shared_rg'] ]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-acme-fitness'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-out main.tfplan -var spring_cloud_service=$(spring_apps_service_name) -var spring_cloud_resource_group_name=$(spring_apps_rg) -var name_prefix=$(namePrefix) -var subscription_id=$(subscriptionId) -var resource_group=$(spoke_rg) -var private_zones_resource_group_name=$(private_dns_rg) -var shared_rg=$(shared_rg)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)

  - job: build_and_deploy_acme_fitness_ms
    displayName: Build and Deploy Acme Fitness Microservices
    dependsOn: [deploy_acme_fitness_infra, deploy_enterprise_sa ]
    pool: 
      vmImage: 'ubuntu-latest'
    variables:
      - name: spring_apps_service_name 
        value: $[ dependencies.deploy_enterprise_sa.outputs['terraformOutput.spring_apps_service_name'] ]
      - name: spring_apps_rg 
        value: $[ dependencies.deploy_enterprise_sa.outputs['terraformOutput.spring_apps_rg'] ]
    steps:
      - checkout: acme-fitness-store
        path: fitness-store
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          jdkArchitectureOption: 'x64'
          mavenVersionOption: Default
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          goals: 'package'
      
      - bash: mvn clean package -DskipTests
      - task: AzureCLI@2
        displayName: Install Azure CLI Spring Extension
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            az extension add --name spring -y
            az spring list -o table
          addSpnToEnvironment: true 
      - task: AzureCLI@2
        displayName: Deploy acme-payment
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            az spring app deploy \
              --resource-group $(spring_apps_rg) \
              --service $(spring_apps_service_name) \
              --name payment-service \
              --artifact-path fitness-store/apps/acme-payment \
              --jvm-options='-Xms2048m -Xmx2048m' \
              --config-file-patterns payment 
          addSpnToEnvironment: true 
      - task: AzureCLI@2
        displayName: Deploy catalog-service
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            az spring app deploy \
              --resource-group $(spring_apps_rg) \
              --service $(spring_apps_service_name) \
              --name catalog-service \
              --artifact-path fitness-store/apps/acme-catalog \
              --jvm-options='-Xms2048m -Xmx2048m' \
              --config-file-patterns catalog
          addSpnToEnvironment: true 
      - task: AzureCLI@2
        displayName:  Deploy order-service
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            az spring app deploy \
              --resource-group $(spring_apps_rg) \
              --service $(spring_apps_service_name) \
              --name order-service \
              --artifact-path fitness-store/apps/acme-order \
              --jvm-options='-Xms2048m -Xmx2048m' \
          addSpnToEnvironment: true 
      - task: AzureCLI@2
        displayName:  Deploy cart-service
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            az spring app deploy \
              --resource-group $(spring_apps_rg) \
              --service $(spring_apps_service_name) \
              --name  cart-service \
              --artifact-path fitness-store/apps/acme-order/acme-cart  \
              --jvm-options='-Xms2048m -Xmx2048m' \
              --env CART_PORT=8080
          addSpnToEnvironment: true 
      - task: AzureCLI@2
        displayName:  Deploy frontend
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            az spring app deploy \
              --resource-group $(spring_apps_rg) \
              --service $(spring_apps_service_name) \
              --name frontend \
              --artifact-path fitness-store/apps/acme-shopping \
              --jvm-options='-Xms2048m -Xmx2048m' 
          addSpnToEnvironment: true 

  - job: destroy_acme_fitness_infra
    displayName: Destroy Acme Fitness Infrastructure
    dependsOn: [deploy_spoke_network, deploy_shared_resources, deploy_enterprise_sa, deploy_acme_fitness_infra, build_and_deploy_acme_fitness_ms]
    condition: eq(variables['destroyEnterprise'], 'true')
    variables: 
      - name: workingDirectory
        value:  "Scenarios/sample-apps/fitness-store/terraform"
      - name: spring_apps_service_name 
        value: $[ dependencies.deploy_enterprise_sa.outputs['terraformOutput.spring_apps_service_name'] ]
      - name: spring_apps_rg 
        value: $[ dependencies.deploy_enterprise_sa.outputs['terraformOutput.spring_apps_rg'] ]
      - name: spoke_rg 
        value: $[ dependencies.deploy_spoke_network.outputs['terraformOutput.spoke_rg'] ]
      - name: spoke_vnet_name 
        value: $[ dependencies.deploy_spoke_network.outputs['terraformOutput.spoke_vnet_name'] ]
      - name: private_dns_rg 
        value: $[ dependencies.deploy_spoke_network.outputs['terraformOutput.private_dns_rg'] ]
      - name: shared_rg 
        value: $[ dependencies.deploy_shared_resources.outputs['terraformOutput.shared_rg'] ]
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-acme-fitness'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-destroy -out main.tfplan -var spring_cloud_service=$(spring_apps_service_name) -var spring_cloud_resource_group_name=$(spring_apps_rg) -var subscription_id=$(subscriptionId) -var resource_group=$(spoke_rg) -var private_zones_resource_group_name=$(private_dns_rg) -var shared_rg=$(shared_rg)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)

  - job: destroy_spring_apps_enterprise
    displayName: Destroy 06 LZ Spring Apps Enterprise
    dependsOn: [destroy_acme_fitness_infra,  deploy_enterprise_sa]
    condition: eq(variables['destroyEnterprise'], 'true')
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/06-LZ-SpringApps-Enterprise"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-springapps-standard'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-destroy -out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
  
  - job: destroy_hub_firewall
    displayName: Destroy 05 Hub Firewall
    dependsOn: [destroy_spring_apps_enterprise]
    condition: eq(variables['destroyEnterprise'], 'true')
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/05-Hub-AzureFirewall"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'hub-azurefirewall'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-destroy -out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)

  - job: destroy_shared_resources
    displayName: Destroy 04 LZ Shared Resources
    dependsOn: [destroy_hub_firewall]
    condition: eq(variables['destroyEnterprise'], 'true')
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/04-LZ-SharedResources"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-sharedresources'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-destroy -out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName) -var jump_host_admin_username=$(jumpBoxUsername) -var jump_host_password=$(jumpBoxPassword) '
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)

  - job: destroy_spoke_network
    displayName: Destroy 03 LZ Network
    dependsOn: [destroy_shared_resources]
    condition: eq(variables['destroyEnterprise'], 'true')
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/03-LZ-Network"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'lz-network'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-destroy -out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName) -var jump_host_admin_username=$(jumpBoxUsername) -var jump_host_password=$(jumpBoxPassword) '
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)


  - job: destroy_hub_network
    displayName: Destroy 02 Hub Network
    dependsOn: [destroy_spoke_network]
    condition: eq(variables['destroyEnterprise'], 'true')
    variables: 
      - name: workingDirectory
        value:  "Scenarios/ASA-Secure-Baseline/Terraform/02-Hub-Network"
    pool: 
      vmImage: 'ubuntu-latest'

    steps:
      - checkout: self
      - task: AzureCLI@2
        displayName: Terraform credentials
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptLocation: inlineScript
          scriptType: bash
          inlineScript: |
            set -eu
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(armClientId)"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$(armClientSecret)"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
          addSpnToEnvironment: true
      - task: TerraformTaskV3@3
        displayName: Initialize Terraform
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmResourceGroupName: $(terraformStateRg)
          backendAzureRmStorageAccountName: $(stateStorageAccountName)
          backendAzureRmContainerName: $(stateStorageContainerName)
          backendAzureRmKey: 'hub-network'

      - task: TerraformTaskV3@3
        name: terraformPlan
        displayName: Create Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workingDirectory) 
          commandOptions: '-destroy -out main.tfplan -var=location=$(region) -var name_prefix=$(namePrefix) -var environment=$(environment) -var SPRINGAPPS_SPN_OBJECT_ID=$(springAppsSpnObjectId) -var state_sa_rg=$(terraformStateRg) -var state_sa_name=$(stateStorageAccountName) -var state_sa_container_name=$(stateStorageContainerName)'
          environmentServiceNameAzureRM: $(azureServiceConnection)

      # Only runs if the 'terraformPlan' task has detected changes the in state. 
      - task: TerraformTaskV3@3
        displayName: Apply Terraform Plan
        name: terraformApply
        condition: eq(variables['terraformPlan.changesPresent'], 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: 'main.tfplan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
